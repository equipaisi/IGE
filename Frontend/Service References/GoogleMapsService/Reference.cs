//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using GoogleMaps.DistanceMatrix;
using GoogleMaps.Geocoding;

namespace Frontend.GoogleMapsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoogleMapsService.IGoogleMaps")]
    public interface IGoogleMaps {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoogleMaps/GetCoordinates", ReplyAction="http://tempuri.org/IGoogleMaps/GetCoordinatesResponse")]
        Location GetCoordinates(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoogleMaps/GetCoordinates", ReplyAction="http://tempuri.org/IGoogleMaps/GetCoordinatesResponse")]
        System.Threading.Tasks.Task<Location> GetCoordinatesAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoogleMaps/GetPlace", ReplyAction="http://tempuri.org/IGoogleMaps/GetPlaceResponse")]
        Place GetPlace(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoogleMaps/GetPlace", ReplyAction="http://tempuri.org/IGoogleMaps/GetPlaceResponse")]
        System.Threading.Tasks.Task<Place> GetPlaceAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoogleMaps/DistanceBetween", ReplyAction="http://tempuri.org/IGoogleMaps/DistanceBetweenResponse")]
        long DistanceBetween(string origin, string destination, TravelMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoogleMaps/DistanceBetween", ReplyAction="http://tempuri.org/IGoogleMaps/DistanceBetweenResponse")]
        System.Threading.Tasks.Task<long> DistanceBetweenAsync(string origin, string destination, TravelMode mode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGoogleMapsChannel : Frontend.GoogleMapsService.IGoogleMaps, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GoogleMapsClient : System.ServiceModel.ClientBase<Frontend.GoogleMapsService.IGoogleMaps>, Frontend.GoogleMapsService.IGoogleMaps {
        
        public GoogleMapsClient() {
        }
        
        public GoogleMapsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GoogleMapsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GoogleMapsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GoogleMapsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Location GetCoordinates(string location) {
            return base.Channel.GetCoordinates(location);
        }
        
        public System.Threading.Tasks.Task<Location> GetCoordinatesAsync(string location) {
            return base.Channel.GetCoordinatesAsync(location);
        }
        
        public Place GetPlace(string location) {
            return base.Channel.GetPlace(location);
        }
        
        public System.Threading.Tasks.Task<Place> GetPlaceAsync(string location) {
            return base.Channel.GetPlaceAsync(location);
        }
        
        public long DistanceBetween(string origin, string destination, TravelMode mode) {
            return base.Channel.DistanceBetween(origin, destination, mode);
        }
        
        public System.Threading.Tasks.Task<long> DistanceBetweenAsync(string origin, string destination, TravelMode mode) {
            return base.Channel.DistanceBetweenAsync(origin, destination, mode);
        }
    }
}
